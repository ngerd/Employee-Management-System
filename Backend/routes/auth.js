import express from "express";
import pool from "../DB.js";
import generateTokenAndSetCookie from "../utils/generateToken.js";
import jwt from "jsonwebtoken";
import dotenv from "dotenv";

dotenv.config();

const router = express.Router();

// Login endpoint
router.post("/login", async (req, res) => {
  const { username, password } = req.body;

  // Validate input
  if (!username || !password) {
    return res.status(400).json({ error: "Missing username or password" });
  }

  try {
    // Query the Employee table for the provided username
    const result = await pool.query(
      'SELECT * FROM "Employee" WHERE username = $1',
      [username]
    );

    // If no matching user is found, return an error
    if (result.rowCount === 0) {
      return res.status(401).json({ error: "Invalid credentials" });
    }

    const employee = result.rows[0];

    // Check the provided password against the stored password
    // (For production, store hashed passwords and compare using bcrypt)
    if (employee.password !== password) {
      return res.status(401).json({ error: "Invalid credentials" });
    }

    // Generate a JWT token and set it in a cookie using the helper function
    generateTokenAndSetCookie(employee.employee_id, res);

    // Also generate the token to include it in the JSON response
    const token = jwt.sign(
      { empId: employee.employee_id },
      process.env.JWT_SECRET,
      { expiresIn: "15d" }
    );

    return res.json({ access_token: token, employee_id: employee.employee_id });
  } catch (err) {
    console.error("Login error:", err);
    return res.status(500).json({ error: "Internal server error" });
  }
});

// Create Account endpoint using role_id instead of role
router.post("/createAccount", async (req, res) => {
  const { username, password, role_id, name } = req.body;

  // Validate input
  if (!username || !password || !role_id || !name) {
    return res.status(400).json({ error: "Missing required fields" });
  }

  try {
    // Insert the new account into the Employee table.
    // The employee_id will be auto-generated by the database.
    const result = await pool.query(
      'INSERT INTO "Employee" (username, password, role_id, name) VALUES ($1, $2, $3, $4) RETURNING employee_id',
      [username, password, role_id, name]
    );

    return res.status(201).json({
      status: "successful",
      employee_id: result.rows[0].employee_id,
    });
  } catch (err) {
    console.error("Create account error:", err);
    return res.status(500).json({ error: "Internal server error" });
  }
});

// Logout endpoint: clears the JWT cookie
router.post("/logout", (req, res) => {
  // Clear the "jwt" cookie so the client loses its token
  res.clearCookie("jwt", {
    httpOnly: true,
    sameSite: "strict",
    secure: process.env.NODE_ENV !== "development",
  });
  return res.json({ message: "Logged out successfully" });
});

export default router;
